#! /usr/bin/env python

PACKAGE = 'bitbots_quintic_walk'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
group_engine = gen.add_group("engine")
group_IK = gen.add_group("IK")
group_node = gen.add_group("node")
group_exper = gen.add_group("experimental")


#       Name       Type      Level    Description     Default Min   Max
group_engine.add("freq", double_t, 1,
        "Full walk cycle frequency (in Hz, > 0)", min=0.1, max=5)
group_engine.add("doubleSupportRatio", double_t, 1,
        "Length of double support phase in half cycle(ratio, [0:1])", min=0, max=1)
group_engine.add("footDistance", double_t, 1,
        "Lateral distance between the feet center (in m, >= 0)", min=0, max=1)
group_engine.add("footRise", double_t, 1,
        "Maximum flying foot height (in m, >= 0)", min=0, max=1)
group_engine.add("footApexPhase", double_t, 1,
        "Phase of flying foot apex(single support cycle phase, [0:1])", min=0, max=1)
group_engine.add("footOvershootRatio", double_t, 1,
        "Foot X/Y overshoot in ratio of step length(ratio, >= 0)", min=0, max=1)
group_engine.add("footOvershootPhase", double_t, 1,
        "Foot X/Y overshoot phase (single support cycle phase, [footApexPhase:1]", min=0, max=1)
group_engine.add("trunkHeight", double_t, 1,
        "Height of the trunk from ground (in m, > 0)", min=0, max=1)
group_engine.add("trunkPitch", double_t, 1,
        "Trunk pitch orientation (in rad)", min=-1, max=1)
group_engine.add("trunkPhase", double_t, 1,
        "Phase offset of trunk oscillation (half cycle phase, [0:1])", min=0, max=1)
group_engine.add("trunkXOffset", double_t, 1,
        "Trunk forward offset (in m)", min=-0.2, max=0.2)
group_engine.add("trunkYOffset", double_t, 1,
        "Trunk lateral offset (in m)", min=-0.2, max=0.2)
group_engine.add("trunkSwing", double_t, 1,
        "Trunk lateral oscillation amplitude ratio (ratio, >= 0)", min=0, max=10)
group_engine.add("trunkPause", double_t, 1,
        "Trunk swing pause length in phase at apex (half cycle ratio, [0:1])", min=0, max=1)
group_engine.add("trunkXOffsetPCoefForward", double_t, 1,
        "Trunk forward offset proportional to forward step (in 1)", min=0, max=1)
group_engine.add("trunkXOffsetPCoefTurn", double_t, 1,
        "Trunk forward offset proportional to rotation step (in m/rad)", min=0, max=1)
group_engine.add("trunkPitchPCoefForward", double_t, 1,
        "Trunk pitch orientation proportional to forward step (in rad/m)", min=0, max=1)
group_engine.add("trunkPitchPCoefTurn", double_t, 1,
        "Trunk pitch orientation proportional to rotation step (in 1)", min=0, max=1)

group_IK.add("useAnalyticSolver", bool_t, 1, "Use analytic IK solver instead of bioIK")
group_IK.add("bioIKTime", double_t, 1,
        "Timeout time for bioIK [s]", min=0, max=0.05)
group_IK.add("bioIKSingleChain", bool_t, 1,
        "one or two IK calls")
group_IK.add("bioIKApprox", bool_t, 1,
        "Enable approximate solution.")

group_node.add("debugActive", bool_t, 1,
        "actviate debug")
group_node.add("pubModelJointStates", bool_t, 1,
        "Publish the goal motor positions as joint states")
group_node.add("engineFreq", double_t, 1,
        "Max freq of engine update rate [hz]", min=1, max=1000)
group_node.add("odomPubFactor", double_t, 1,
        "Publish odom every [int] update of walk engine", min=1, max=1000)


group_exper.add("compensateGravity", bool_t, 1,
        "actviate the gravity compensation")
group_exper.add("footPutDownZOffset", double_t, 1,
        "Let the foot's downward trajectory end above the ground this is helpful if the support leg bends, (in m, >= 0))", min=0, max=0.1)                
group_exper.add("footPutDownPhase", double_t, 1,
        "Phase time for moving the foot from Z offset to ground (phase between apex and single support end [0:1])", min=0, max=1)                            
group_exper.add("trunkYOnlyInDoubleSupport", bool_t, 1,
        "Restrict the movement of the trunk in Y direction to double support phase")


exit(gen.generate(PACKAGE, "bitbots_quintic_walk", "bitbots_quintic_walk_params"))
